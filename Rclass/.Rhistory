a <- 1
a+2
b*3
b <- 2
b*3
setwd("~/HtmlBasic")
setwd("~/Rclass")
df_exam <- read_excel("excel_exam.xlsx")
setwd("~/BigDataClass/Rclass")
exam <- read_excel("excel_exam.xlsx")
install.packages("readxl")
library(readxl)
df_exam <- read_excel("excel_exam.xlsx")
View(exam)
exam <- read_excel("excel_exam.xlsx")
View(exam)
library(ggplot2)
mpg
mpg <- as.data.frame(ggplot2::mpg)
?mpg
View(mpg)
View(mpg)
df_raw <- data.frame(var1 = c(1,2,1),
var2 = c(2,3,2))
View(df_raw)
View(df_raw)
install.packages("dplyer")  # 데이터 가공에 사용되는 패키지
library(dplyer)
R.version
install.packages("dplyer")  # 데이터 가공에 사용되는 패키지
library(dplyer)
install.packages("dplyer")  # 데이터 가공에 사용되는 패키지
R.version
install.packages("dplyer")  # 데이터 가공에 사용되는 패키지
install.packages("dplyr")  # 데이터 가공에 사용되는 패키지
library(dplyr)
df_new <- df_raw
df_new
df_new <- rename(df_new, v2 = var2)
df_new
head(mpg)
mpg_new <- mpg
mpg_new <- rename(mpg_new, city = cty, highway = hwy)
head(mpg_new)
View(df_new)
View(df_new)
View(df_raw)
View(df_raw)
df <- df_raw
df
df$sum <- df$var1 + df$var2
df
mpg_new$total <- (mpg_new$city+mpg_new$highway)/2
head(mpg_new)
mean(mpg_new$total)
summary(mpg_new$total)
hist(mpg_new$total)
mpg_new$test <- ifelse(mpg_new$total >= 20,"pass", "fail")
head(mpg_new)
head(mpg_new,20)
table(mpg_new$test)
qplot(mpg_new$test)
library(ggplot2)
install.packages("ggolot2")
install.packages("ggplot2")
library(ggplot2)
qplot(mpg_new$test)
mpg_new$grade <- ifelse(mpg_new$total >= 30,"A", ifelse(mpg_new$total >= 20,"B", "C"))
source('~/BigDataClass/Rclass/script1.R', encoding = 'UTF-8', echo=TRUE)
head(mpg_new)
table(mpg_new$grade)
mid <- as.data.frame(ggplot2::midwest)
mid <- rename(mid, total = poptotal)
mid <- rename(mid, asian = popasian)
mid$popr <- mid$asian/mid$total*100
hist(mid$popr)
mean(mid$popr)
mid$group <- ifelse(mid$popr >0.4872462,"large", "small")
qplot(mid$group)
table(mid$group)
install.packages("readxl")
library(readxl)
sales = read_xlsx("Cafe_Sales.xlsx")
head(sales)
tail(sales)
dim(sales)
str(sales)
summary(sales)
View(sales)
is.na(sales)
table(is.na(sales))
table(is.na(sales$order_id))
table(is.na(sales$order_date))
sales <- na.omit(sales)
table(is.na(sales))
head(sales)
head(sales,20)
unique(sales$order_date)
unique(sales$category)
unique(sales$item)
unique(sales$price)
table(sales$item)
sort(table(sales$item))
sort(table(sales$item), decreasing = TRUE)
sales_tr <- data.frame(table(sales$item))
sales_tr
sales_item <-  subset.data.frame(sales, select = c("item", "price"))
sales_item
sales_item <- unique(sales_item)
sales_item
# 제품별 판매 개수와 제품별 가격을 계산
item_list = merge(sales_tr, sales_item)
item_list
# 제품별 판매 개수와 제품별 가격을 계산
item_list = merge(sales_tr, sales_item, by.x="Var1", by.y = "item")
item_list
item_list$amount = item_list$Freq * item_list$price
item_list
sum(item_list$amount)
sales$weekday = weekdays(sales$order_date)
table(sales$order_date)
table(sales$weekday)
date_info = data.frame(weekday = c("월요일","화요일","수요일",
"목요일","금요일","토요일","일요일"),
day=c("평일","평일","평일","평일","평일",
"주말","주말"))
sales <- merge(sales, date_info)
head(sales)
table(sales$day)
sales$month <- months(sales$order_date)
head(sales)
sales$month <- months(sales$order_date)
sales$month<- as.integer(gsub('월', '', sales$month))
sales$season <- ifelse(sales$month >=12,"겨울",
ifelse(sales$month>=9, '가을',
ifelse(sales$month >=6,'여름',
ifelse(sales$month>=3,'봄',
ifelse(sales$month>=1,'겨울')))))
head(sales)
table(sales$season)
cate <- data.frame(table(sales$category))
care
cate
library(ggplot2)
qplot(cate)
ggplot(target, aes(Var1, Freq))
ggplot(cate, aes(Var1, Freq))
ggplot(cate, aes(Var1, Freq)) +
geom.col()
ggplot(cate, aes(Var1, Freq)) +
geom.col()
ggplot(cate, aes(Var1, Freq)) + geom.col()
ggplot(cate, aes(Var1, Freq)) + geom_col()
ggplot(cate, aes(Var1, Freq)) +
geom_col() +
geom_text(label = target$Freq)
ggplot(cate, aes(Var1, Freq)) +
geom_col() +
geom_text(label = cate$Freq)
days <- data.frame(table(sales$weekday))
days
ggplot(days,aes(Var1,Freq)) +geom_col()+geom_text(label=cate$Freq)
days
days$por = days$Freq / sum(days$Freq) * 100
days
ggplot(days, aes(x="", y = por, fill=Var1)) + geom_col()
